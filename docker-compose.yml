version: "3.8"

services:
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT}:3000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - BACKEND_URL=${BACKEND_URL}
    depends_on:
      - backend
    restart: unless-stopped
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
      - /app/.next

  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    ports:
      - "${BACKEND_PORT}:${BACKEND_CONTAINER_PORT}"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${BACKEND_CONTAINER_PORT}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}
      - POSTGRES_HOST=db
      - JWT_SECRET=${JWT_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - SESSION_MAXAGE=${SESSION_MAXAGE}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
      - /app/dist

  db:
    image: postgres:16-alpine
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
